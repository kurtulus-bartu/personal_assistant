-- === Planner Schema Patch (idempotent) ===
-- Tasks: notes, has_time, due_date, start_ts, end_ts

-- 0) TASKS tablosu
CREATE TABLE IF NOT EXISTS public.tasks (
  id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title       text NOT NULL,
  notes       text NOT NULL DEFAULT '',
  status      text NOT NULL DEFAULT 'todo',
  tag_id      integer NULL,
  project_id  integer NULL,
  has_time    boolean NOT NULL DEFAULT false,
  due_date    date NULL,
  start_ts    timestamptz NULL,
  end_ts      timestamptz NULL,
  parent_id   integer NULL,
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

-- 1) TASKS kolonları
ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS notes    text NOT NULL DEFAULT '';

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS has_time boolean NOT NULL DEFAULT false;

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS due_date date NULL;

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS start_ts timestamptz NULL;

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS end_ts   timestamptz NULL;

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS tag_id integer NULL;

ALTER TABLE IF EXISTS public.tasks
  ADD COLUMN IF NOT EXISTS project_id integer NULL;

-- 2) Faydalı indeksler ve view (tasks tablosu mevcutsa)
DO $$
BEGIN
  IF EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'tasks'
  ) THEN
    EXECUTE 'CREATE INDEX IF NOT EXISTS idx_tasks_starts_at ON public.tasks (start_ts)';
    EXECUTE 'CREATE INDEX IF NOT EXISTS idx_tasks_unscheduled ON public.tasks (id)
      WHERE COALESCE(has_time, false) = false';
    EXECUTE 'CREATE OR REPLACE VIEW public.tasks_unscheduled AS
      SELECT * FROM public.tasks
      WHERE COALESCE(has_time, false) = false';
  END IF;
END $$;

-- 3) Tags tablosu
CREATE TABLE IF NOT EXISTS public.tags (
  id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        text NOT NULL UNIQUE,
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_tags_updated_at ON public.tags (updated_at);

-- 4) Projects tablosu
CREATE TABLE IF NOT EXISTS public.projects (
  id          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        text NOT NULL UNIQUE,
  created_at  timestamptz NOT NULL DEFAULT now(),
  updated_at  timestamptz NOT NULL DEFAULT now(),
  tag_id      integer NULL
);

CREATE INDEX IF NOT EXISTS idx_projects_updated_at ON public.projects (updated_at);

-- 5) Projeler-tagler arasındaki ilişki
DO $$
BEGIN
  IF EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'projects'
  ) AND EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'tags'
  ) THEN
    BEGIN
      EXECUTE 'ALTER TABLE public.projects
        ADD CONSTRAINT projects_tag_id_fkey
        FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE SET NULL';
    EXCEPTION
      WHEN duplicate_object THEN NULL;
    END;
  END IF;
END $$;

-- 6) Tasks-projeler ve tagler arasındaki ilişki
DO $$
BEGIN
  IF EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'tasks'
  ) AND EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'projects'
  ) THEN
    BEGIN
      EXECUTE 'ALTER TABLE public.tasks
        ADD CONSTRAINT tasks_project_id_fkey
        FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL';
    EXCEPTION
      WHEN duplicate_object THEN NULL;
    END;
  END IF;
  IF EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'tasks'
  ) AND EXISTS (
    SELECT FROM pg_tables
    WHERE schemaname = 'public' AND tablename = 'tags'
  ) THEN
    BEGIN
      EXECUTE 'ALTER TABLE public.tasks
        ADD CONSTRAINT tasks_tag_id_fkey
        FOREIGN KEY (tag_id) REFERENCES public.tags(id) ON DELETE SET NULL';
    EXCEPTION
      WHEN duplicate_object THEN NULL;
    END;
  END IF;
END $$;

-- NOT: updated_at trigger'ların zaten tanımlı.
-- RLS kullanıyorsan, select/insert/update/delete policy'lerini ayrıca eklemeyi unutma.
